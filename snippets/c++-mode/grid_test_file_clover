# -*- mode: snippet -*-
# name: Grid Clover action test file
# key: grid_test_file_clover
# group: grid
# contributor: Daniel Richtmann <daniel.richtmann@gmail.com>
# --
/*************************************************************************************

    Grid physics library, www.github.com/paboyle/Grid

    Source file: ./${1:path_from_project_root}

    Copyright (C) 2015 - ${2:Current Year}

    Author: Daniel Richtmann <daniel.richtmann@gmail.com>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

    See the full license in the file "LICENSE" in the top level distribution directory
*************************************************************************************/
/*  END LEGAL */

#include <Grid/Grid.h>

using namespace Grid;
using namespace Grid::QCD;

int main(int argc, char** argv) {
  Grid_init(&argc, &argv);

  // clang-format off
  GridCartesian*         UGrid   = SpaceTimeGrid::makeFourDimGrid(GridDefaultLatt(), GridDefaultSimd(Nd, vComplex::Nsimd()), GridDefaultMpi());
  GridRedBlackCartesian* UrbGrid = SpaceTimeGrid::makeFourDimRedBlackGrid(UGrid);
  // clang-format on

  std::vector<int> seeds({1, 2, 3, 4});
  GridParallelRNG  pRNG(UGrid);
  pRNG.SeedFixedIntegers(seeds);

  // clang-format off
  LatticeFermion    src(UGrid); src = Zero();
  LatticeFermion    res(UGrid); random(pRNG, res);
  LatticeGaugeField Umu(UGrid); SU3::HotConfiguration(pRNG, Umu);
  // clang-format on

  typename WilsonCloverFermionR::ImplParams implParams;
  WilsonAnisotropyCoefficients anisParams;

  if (GridCmdOptionExists(argv, argv + argc, "--antiperiodic"))
    implParams.boundary_phases = {+1., +1., +1., -1.};

  RealD mass = 0.5;
  RealD csw = 1.0;

  WilsonCloverFermionR Dwc(Umu, *UGrid, *UrbGrid, mass, csw, csw, anisParams, implParams);
  MdagMLinearOperator<WilsonCloverFermionR, LatticeFermion> MdagMOpDwc(Dwc);

  $0

  Grid_finalize();
}
